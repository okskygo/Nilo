apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

configurations.all {
  resolutionStrategy.force "com.google.code.findbugs:jsr305:3.0.1"
}

android {
  compileSdkVersion versions.compileSdk
  buildToolsVersion versions.buildTools

  defaultConfig {
    applicationId "com.silver.cat.nilo"
    minSdkVersion versions.minSdk
    targetSdkVersion versions.targetSdk
    versionCode 1
    versionName "1.0"
    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    multiDexEnabled true
  }

  signingConfigs {
    Properties props = new Properties()
    props.load(new FileInputStream(file('secret/password.properties')))
    release {
      // keystore's alias is `nilorelease`
      storeFile file('secret/nilo_release.keystore')
      storePassword props["KEY_STORE_PASSWORD"]
      keyAlias "nilorelease"
      keyPassword props["RELEASE_KEY_PASSWORD"]
    }
  }

  buildTypes {
    release {
      debuggable false
      zipAlignEnabled true
      signingConfig signingConfigs.release
      minifyEnabled true
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
      //      manifestPlaceholders = [googleApiKey: "$niloApiKey"]
      //      buildConfigField 'String', 'googleApiKey', '"' + niloApiKey + '"'
    }

    debug {
      //      manifestPlaceholders = [googleApiKey: "$niloApiKey"]
      //      buildConfigField 'String', 'googleApiKey', '"' + niloApiKey + '"'
    }
  }

}

sourceSets {
  main.java.srcDirs += 'src/main/kotlin'
}

dependencies {
  implementation fileTree(dir: 'libs', include: ['*.jar'])

  //kotlin
  implementation depends.kotlin.stdlib
  implementation depends.kotlin.reflect

  //==================== Support Library ====================
  implementation depends.support.v4
  implementation depends.support.appcompat
  implementation depends.support.design
  implementation depends.support.cardview
  implementation depends.support.constraint
  implementation depends.support.multidex
  implementation depends.support.preference
  implementation depends.support.preferenceV14

  //rxjava
  implementation depends.rxjava2.core
  implementation depends.rxjava2.android
  implementation depends.rxjava2.kotlin

  //rxbinding2
  implementation depends.rxbinding2.kotlin

  //dagger2
  implementation depends.dagger.core
  implementation depends.dagger.android
  implementation depends.dagger.androidSupport
  kapt depends.dagger.compiler
  kapt depends.dagger.androidProcessor

  //rxlifecycle2
  implementation depends.rxlifecycle.core
  implementation depends.rxlifecycle.kotlin
  implementation depends.rxlifecycle.components

  //playService
  implementation depends.playService.base

  //firebase
  implementation depends.firebase.core
  implementation depends.firebase.storage
  implementation depends.firebase.firestore
  implementation depends.firebase.messaging

  //lifecycle
  implementation depends.lifecycle.extensions
  implementation depends.lifecycle.reactivestreams

  //rxActivityResult
  implementation depends.rxActivityResult.core

  //==================== UI ====================

  //glide
  implementation depends.glide.core
  implementation depends.glide.okhttp3
  kapt depends.glide.compiler

  //cropper
  implementation depends.cropper.core

  //material dimen
  implementation depends.material.dimens

  //==================== Test ====================
  testImplementation depends.junit
  //  testImplementation depends.mockitoKotlin
  //
  //  testImplementation depends.robolectric.core
  //  testImplementation depends.robolectric.multidex
  //
  //  androidTestImplementation depends.supporttest.runner
  //  androidTestImplementation depends.supporttest.espresso
  //  androidTestImplementation depends.supporttest.contrib
}

apply plugin: 'com.google.gms.google-services'
